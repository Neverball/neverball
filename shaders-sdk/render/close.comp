#version 450

#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shading_language_420pack : require


#include "../include/structs.glsl"
#include "../include/constants.glsl"
#include "../include/uniforms.glsl"
#include "../include/fast_math.glsl"
#include "../include/rays.glsl"

layout (binding=0) uniform samplerCube cubeTex;

float intersectSphere(in vec3 origin, in vec3 ray, in vec3 sphereCenter, in float sphereRadius) {
    vec3 toSphere = origin - sphereCenter;
    float a = dot(ray, ray);
    float b = 2.0f * dot(toSphere, ray);
    float c = dot(toSphere, toSphere) - sphereRadius*sphereRadius;
    float discriminant = fma(b,b,-4.0f*a*c);
    if(discriminant > 0.0f) {
        float da = 0.5f / a;
        float t1 = (-b - sqrt(discriminant)) * da;
        float t2 = (-b + sqrt(discriminant)) * da;
        float mn = min(t1, t2);
        float mx = max(t1, t2);
        if (mn >= 0.0f) return mn; else
        if (mx >= 0.0f) return mx;
    }
    return INFINITY;
}

layout (local_size_x = RENDERER_CU, local_size_y = 1, local_size_z = 1) in;

float mlength(vec3 mcolor){
    return max(mcolor.x, max(mcolor.y, mcolor.z));
}

void main() {
    int offT = int(gl_GlobalInvocationID.x);
    int it = offT;
    if (it >= samplerUniform.rayCount) return;
    
    int t = actived[it];
    Ray ray = fetchRayDirect(t);
    
    if (ray.actived < 1) return;
    Hit hit = fetchHitDirect(t);

    ray.params.y -= 1;

    if ( ray.extended.x < 1 && (ray.params.z > 0 || ray.params.w > 0 )) {
        float dt = intersectSphere(ray.origin.xyz, ray.direct.xyz, normalize(lightUniform.lightVector.xyz) * lightUniform.lightDistance, lightUniform.lightRadius + 0.0001f);
        
        if (dt < INFINITY && dt < hit.dist) {
            //ray.final.xyz = ray.color.xyz / (lightUniform.lightRadius * lightUniform.lightRadius) * lightUniform.lightColor.xyz;
            ray.final.xyz = ray.color.xyz;
            ray.actived = 0;
            
            hit.triangle = 0;
            hit.dist = dt;
            hit.materialID = LONGEST;
            hit.shaded = 1;
        }
    }
    
    if ((hit.dist >= INFINITY) && ray.params.w < 1) {
        // Debug
        //ray.final.xyz = ray.color.xyz * vec3(1.0f, 0.0f, 1.0f);
        
        // Release
        ray.final.xyz = ray.color.xyz * vec3(0.0f);

        //ray.final.xyz = ray.color.xyz;
        ray.actived = 0;

        hit.triangle = 0;
        hit.dist = INFINITY;
        hit.materialID = LONGEST;
        hit.shaded = 1;
    }
    
    ray.origin.xyz = fma(ray.direct.xyz, vec3(hit.dist), ray.origin.xyz);
    ray.color.xyz = max(ray.color.xyz, vec3(0.0f));
    ray.final = max(ray.final, vec4(0.0f));
    
    if(ray.actived == 1) {
        int act = int(atomicCounterIncrement(acounter));
        qrays[act] = t;
    }

    storeHit(t, hit);
    storeRay(t, ray);
}
