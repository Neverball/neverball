#version 450
#extension GL_GOOGLE_include_directive : enable
#line 1 "./tools/loader.comp"


#extension GL_ARB_separate_shader_objects : require
#extension GL_ARB_shading_language_420pack : require

#line 1 "./tools/../include/structs.glsl"
struct Minmax {
    vec4 mn;
    vec4 mx;
};

struct Thash {
    int triangle;
    int previous;
};

struct Voxel {
    int depthLeaf;
    int parent;
    int last;
    int suboff;
    int coord;
    int count;
    int _t0;
};

struct Ray {
    int idx;
    int prev;
    int texel;
    int actived;
    vec4 origin;
    vec4 direct;
    vec4 color;
    vec4 final;
    ivec4 params;
    ivec4 extended;
};

struct Hit {
    vec4 normal;
    vec4 tangent;
    vec2 texcoord;
    float dist;
    float _t0;
    int triangle;
    int materialID;
    int shaded;
    int _t2;
};

struct Texel {
    int last;
    int count;
    float x;
    float y;
};

struct Stride2f {
    float x;
    float y;
};

struct Stride3f {
    float x;
    float y;
    float z;
};

struct Stride3i {
    int x;
    int y;
    int z;
};

struct Stride4f {
    float x;
    float y;
    float z;
    float w;
};

vec2 toVec2(in Stride2f a){
    return vec2(a . x, a . y);
}

vec3 toVec3(in Stride3f a){
    return vec3(a . x, a . y, a . z);
}

vec4 toVec4(in Stride4f a){
    return vec4(a . x, a . y, a . z, a . w);
}

ivec3 toVec3(in Stride3i a){
    return ivec3(a . x, a . y, a . z);
}

Stride2f toStride2(in vec2 a){
    Stride2f o;
    o . x = a . x;
    o . y = a . y;
    return o;
}

Stride3f toStride3(in vec3 a){
    Stride3f o;
    o . x = a . x;
    o . y = a . y;
    o . z = a . z;
    return o;
}

Stride4f toStride4(in vec4 a){
    Stride4f o;
    o . x = a . x;
    o . y = a . y;
    o . z = a . z;
    o . w = a . w;
    return o;
}

struct bbox {
    vec4 pmin;
    vec4 pmax;
};

struct Leaf {
    bbox box;
    int parent;
    int _t0;
    int _t1;
    int _t2;
};

struct HlbvhNode {
    bbox box;
    ivec2 range;
    int parent;
    int left;
    int right;
    int _t0;
    int _t1;
    int _t2;
};
#line 7 "./tools/loader.comp"
#line 1 "./tools/../include/uniforms.glsl"
struct RandomUniformStruct {
    float time;
};

struct MinmaxUniformStruct {
    int heap;
    float prec;
};

struct MaterialUniformStruct {
    int materialID;
    int doubleSide;
    float reflectivity;
    float dissolve;
    float illumPower;
    float ior;
};

struct SamplerUniformStruct {
    vec2 sceneRes;
    int samplecount;
    int rayCount;

    int iteration;
    int phase;

    int maxSamples;
    int currentSample;
    int maxFilters;
    int currentRayLimit;
};

struct LightUniformStruct {
    vec4 lightVector;
    vec4 lightColor;
    float lightRadius;
    float lightDistance;
};

struct GeometryUniformStruct {
    mat4 transform;
    mat4 transformInv;
    vec4 colormod;
    float offset;

    int materialID;
    int triangleCount;
    int triangleOffset;
    int unindexed;
    int loadOffset;
    int NB_mode;
    int unk1;
};

struct HelperUniformStruct {
    ivec4 range;
};

struct OctreeUniformStruct {
    mat4 project;
    mat4 unproject;
    int maxDepth;
    int currentDepth;
    int nodeCount;
};

struct CameraUniformStruct {
    mat4 projInv;
    mat4 camInv;
    mat4 camInv2;
    vec4 eye;
    vec4 view;
    float prob;
    int enable360;
};

layout(std140, binding = 0)uniform ubo0 { RandomUniformStruct randomUniform;};
layout(std140, binding = 1)uniform ubo1 { MinmaxUniformStruct minmaxUniform;};
layout(std140, binding = 2)uniform ubo2 { MaterialUniformStruct materialUniform;};
layout(std140, binding = 3)uniform ubo3 { SamplerUniformStruct samplerUniform;};
layout(std140, binding = 4)uniform ubo4 { LightUniformStruct lightUniform;};
layout(std140, binding = 5)uniform ubo5 { GeometryUniformStruct geometryUniform;};
layout(std140, binding = 6)uniform ubo6 { HelperUniformStruct helperUniform;};
layout(std140, binding = 7)uniform ubo7 { OctreeUniformStruct octreeUniform;};
layout(std140, binding = 8)uniform ubo8 { CameraUniformStruct cameraUniform;};
#line 8 "./tools/loader.comp"
#line 1 "./tools/../include/constants.glsl"
const int LONGEST = 0xFFFFFFFF;
const float INFINITY = 100000.0f;
const float GAMMA = 1.0f;
const float PI = 3.1415926535897932384626422832795028841971f;
const float TWO_PI = 6.2831853071795864769252867665590057683943f;
const float SQRT_OF_ONE_THIRD = 0.5773502691896257645091487805019574556476f;
const float E = 2.7182818284590452353602874713526624977572f;


#line 9 "./tools/loader.comp"
#line 1 "./tools/../include/vertex.glsl"
layout(std430, binding = 3)buffer ssbo3 { Stride3f verts[];};
layout(std430, binding = 4)buffer ssbo4 { int indics[];};
layout(std430, binding = 5)buffer ssbo5 { Stride3f norms[];};
layout(std430, binding = 6)buffer ssbo6 { Stride2f texcs[];};
layout(std430, binding = 7)buffer ssbo7 { int mats[];};
#line 10 "./tools/loader.comp"

layout(binding = 0)uniform atomic_uint tcounter;
layout(std430, binding = 9)buffer ssbo9 { Stride3f iverts[];};
layout(std430, binding = 10)buffer ssbo10 { Stride3f inorms[];};
layout(std430, binding = 11)buffer ssbo11 { Stride2f itexcs[];};
layout(std430, binding = 12)buffer ssbo12 { int imats[];};
layout(std430, binding = 13)buffer ssbo13 { int vindics[];};
layout(std430, binding = 14)buffer ssbo14 { int nindics[];};
layout(std430, binding = 15)buffer ssbo15 { int tindics[];};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1)in;

void main()
{
    if(gl_GlobalInvocationID . x >= geometryUniform . triangleCount)return;

    int crt = int(gl_GlobalInvocationID . x);
    int ctriangle = geometryUniform . loadOffset + crt;
    int matID = geometryUniform . materialID;
    vec3 vertice[3];
    vec3 normal[3];
    vec2 texcoord[3];

    for(int i = 0;i < 3;i ++){
        int ctri = ctriangle * 3;
        int vindices = geometryUniform . unindexed == 1 ?(ctri + i): vindics[ctri + i];
        int nindices = geometryUniform . unindexed == 1 ?(ctri + i): nindics[ctri + i];
        int tindices = geometryUniform . unindexed == 1 ?(ctri + i): tindics[ctri + i];

        vec4 verticef = geometryUniform . transform * vec4(toVec3(iverts[vindices]), 1.0f);
        verticef . xyz /= verticef . w;
        vec4 normalf = vec4(toVec3(inorms[nindices]), 0.0f)* geometryUniform . transformInv;
        vec2 texcoordf = toVec2(itexcs[tindices]);

        vertice[i]= verticef . xyz;
        normal[i]= normalf . xyz;
        texcoord[i]= texcoordf . xy;
    }

    vec3 offsetnormal = normalize(cross(vertice[1]- vertice[0], vertice[2]- vertice[0]));

    int ntriangle = geometryUniform . triangleOffset + crt;
    mats[ntriangle]= matID;
    for(int i = 0;i < 3;i ++){
        int idc = ntriangle * 3 + i;
        indics[idc]= idc;
        verts[idc]= toStride3(vertice[i]+ offsetnormal * geometryUniform . offset);
        norms[idc]= toStride3(normal[i]);
        texcs[idc]= toStride2(texcoord[i]);
    }
}
